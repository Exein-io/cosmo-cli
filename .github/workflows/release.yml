name: Release
on:
  push:
    tags:
      - '*'

env:
  TAG: ${{ github.ref_name }}

jobs:
  vendored_archive:
    name: Vendored archive
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Create release directory
        run: rsync -rv --exclude=.git . ../cosmo-${{ env.TAG }}

      - name: Cargo vendor
        working-directory: ../cosmo-${{ env.TAG }}
        run: |
          mkdir ../vendor-cargo-home
          export CARGO_HOME=$(realpath ../vendor-cargo-home)
          mkdir -p .cargo
          cargo vendor >> .cargo/config.toml

      - name: Create vendored source archive
        working-directory: ../
        id: create-archive
        run: |
          tar cJf cosmo-vendored-${{ env.TAG }}.tar.xz cosmo-${{ env.TAG }}
          echo "archive_file_name=$(realpath ./cosmo-vendored-${{ env.TAG }}.tar.xz)" >> $GITHUB_OUTPUT

      - name: Upload archive
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ env.TAG }}
          path: ${{ steps.create-archive.outputs.archive_file_name }}
          if-no-files-found: error
          retention-days: 1

  build:
    name: Create binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-unknown-linux-gnu
            args: ""

          - target: x86_64-unknown-linux-musl
            args: "--features openssl-vendored"

    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.platform.target }}

      - name: Install musl-gcc
        if: ${{ endsWith(matrix.platform.target, 'musl') }}
        run: sudo apt install -y musl-tools

      - name: Build Release
        run: cargo build --locked --target=${{ matrix.platform.target }} ${{ matrix.platform.args }} --release

      - name: Rename binary
        shell: bash
        id: rename_binary
        run: |
          IFS='-' read -a arch <<< ${{ matrix.platform.target }}
          suffix=""
          if [[ "${{ matrix.platform.target }}" == *"musl"* ]]; then suffix="-static"; fi
          binary_name=./target/${{ matrix.platform.target }}/release/cosmo-${arch}${suffix}
          mv ./target/${{ matrix.platform.target }}/release/cosmo ${binary_name}
          echo "binary_name=${binary_name}" >> $GITHUB_OUTPUT

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ env.TAG }}
          path: ${{ steps.rename_binary.outputs.binary_name }}
          if-no-files-found: error
          retention-days: 1

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - build
      - vendored_archive
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries-${{ env.TAG }}
          path: /tmp/binaries

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.TAG }}
          draft: true
          tag: ${{ env.TAG }}
          artifacts: "/tmp/binaries/*"
          body: |
            <hr>  

            Check out the [changelog](https://github.com/exein-io/cosmo-cli/blob/main/CHANGELOG.md) for details on all the changes and fixes.
